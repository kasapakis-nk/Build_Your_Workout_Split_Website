services:
  frontend:
    build:  # Here I am building an image based on my personal instructions in Dockerfile.
      context: ./frontend
    container_name: SplitOrganizerFrontEnd
    ports:
      - "8080:80" # Requests to port 8080 on my machine (host) are forwarded to port 80 in my container.
    depends_on:
      database:  # Ensure the frontend part runs after the database.
        condition: service_healthy

  database:
    # image: mysql:8.0 # Here I am pulling a pre-built image from Docker Hub.
    build: ./database
    container_name: SplitOrganizerDB
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: mastermag3   # Root User password.
      MYSQL_DATABASE: SplitOrganizerDB  # The specific DB will be created on container run, only if it does not exist.
      MYSQL_USER: nikos                 # To avoid performing DB operations as root user, which is a risk.
      MYSQL_PASSWORD: mastermag3
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    ports:
      - "3307:3306" # Mapping from 3307 on device to 3306 in container, since 3306 is taken my MySQL server.
    volumes:
      # Links the named volume to the container's data path, which is where MySQL stores data in the container by default.
      - ./database/database_data:/var/lib/mysql
      - ./database/login.sh:/usr/local/bin/login.sh
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    stdin_open: true  # Keep STDIN open
    tty: true         # Allocate a pseudo-TTY


    # database-login:
    #   build: ./database
    #   depends_on:
    #     database:
    #       condition: service_healthy
    #   volumes:
    #     - ./database/login.sh:/login.sh
    #   entrypoint: ["/bin/bash", "/login.sh"]